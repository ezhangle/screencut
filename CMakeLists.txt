cmake_minimum_required(VERSION 2.8)
set(CMAKE_BACKWARDS_COMPATIBILITY 2.8)
set(CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS on)

get_filename_component(SCREENCUT_ROOT ${CMAKE_CURRENT_LIST_FILE} PATH CACHE)

set(SCREENCUT_SRC_DIR ${SCREENCUT_ROOT}/src)
set(SCREENCUT_OUT_DIR ${SCREENCUT_ROOT}/out)

project(solution)
add_definitions(-DUNICODE -D_UNICODE)

foreach(flag_var
  CMAKE_CXX_FLAGS 
  CMAKE_CXX_FLAGS_DEBUG 
  CMAKE_CXX_FLAGS_RELEASE
  CMAKE_CXX_FLAGS_MINSIZEREL 
  CMAKE_CXX_FLAGS_RELWITHDEBINFO
  CMAKE_C_FLAGS 
  CMAKE_C_FLAGS_DEBUG 
  CMAKE_C_FLAGS_RELEASE
  CMAKE_C_FLAGS_MINSIZEREL 
  CMAKE_C_FLAGS_RELWITHDEBINFO)
  if(${flag_var} MATCHES "/MD")
      string(REGEX REPLACE "/MD" "/MT" ${flag_var} "${${flag_var}}")
  endif()
endforeach()

set (EXECUTABLE_OUTPUT_PATH ${SCREENCUT_OUT_DIR})
include_directories($ENV{INCLUDE} ${SCREENCUT_SRC_DIR})

file(GLOB SCREENCUT_HEADERS "${SCREENCUT_SRC_DIR}/**.h*")
file(GLOB SCREENCUT_SOURCES "${SCREENCUT_SRC_DIR}/**.c*")
file(GLOB SCREENCUT_RESOURCES "${SCREENCUT_SRC_DIR}/**.rc")

set(SCREENCUT_PRECOMPILED_HEADER "${SCREENCUT_SRC_DIR}/commons.h")
set(SCREENCUT_PRECOMPILED_SOURCE "${SCREENCUT_SRC_DIR}/stdafx.cpp")

get_filename_component( SCREENCUT_PRECOMPILED_BASENAME ${SCREENCUT_PRECOMPILED_HEADER} NAME_WE )
get_filename_component( SCREENCUT_PRECOMPILED_EXTNAME ${SCREENCUT_PRECOMPILED_HEADER} EXT)
set(SCREENCUT_PRECOMPILED_BINARY "${CMAKE_CURRENT_BINARY_DIR}/screencut_stdafx.pch")

list(REMOVE_ITEM SCREENCUT_SOURCES ${SCREENCUT_PRECOMPILED_SOURCE})

set_source_files_properties(${SCREENCUT_PRECOMPILED_SOURCE}
  PROPERTIES COMPILE_FLAGS "/Zm500 /Yc\"${SCREENCUT_PRECOMPILED_BASENAME}${SCREENCUT_PRECOMPILED_EXTNAME}\" /Fp\"${SCREENCUT_PRECOMPILED_BINARY}\""
  OBJECT_OUTPUTS "${SCREENCUT_PRECOMPILED_BINARY}")

set_source_files_properties(${SCREENCUT_SOURCES}}
  PROPERTIES COMPILE_FLAGS "/Zm500 /Yu\"${SCREENCUT_PRECOMPILED_BASENAME}${SCREENCUT_PRECOMPILED_EXTNAME}\" /FI\"${SCREENCUT_PRECOMPILED_HEADER}\" /Fp\"${SCREENCUT_PRECOMPILED_BINARY}\""
  OBJECT_DEPENDS "${SCREENCUT_PRECOMPILED_BINARY}")  

list(APPEND SCREENCUT_SOURCES ${SCREENCUT_PRECOMPILED_SOURCE})

add_executable(screencut WIN32
  ${SCREENCUT_HEADERS}
  ${SCREENCUT_SOURCES}
  ${SCREENCUT_RESOURCES}
)
set_target_properties(screencut PROPERTIES LINK_FLAGS "/SUBSYSTEM:WINDOWS")

target_link_libraries(screencut gdiplus comctl32)


